#!/bin/ash

. /etc/oauth.conf.sh
. /usr/share/libubox/jshn.sh

login()
{
  OAUTH_PROVIDER="${1}"
  USER_INFO_SUB="${2}"
  USER_INFO_EMAIL="${3}"
  USER_INFO_NAME="${4}"
  USER_INFO_PICTURE="${5}"
  USER_INFO_LOCALE="${6}"
  SESSION=$(ubus call session create '{"timeout": 72000}')
  json_init
  json_load "$SESSION"
  json_get_var UBUS_RPC_SESSION ubus_rpc_session
  ubus call session grant "{\"ubus_rpc_session\": \"$UBUS_RPC_SESSION\", \"scope\": \"ubus\", \"objects\": $UBUS_SESSION_GRANTS}"
  ubus call session set "{\"ubus_rpc_session\": \"$UBUS_RPC_SESSION\", \"values\": {\"provider\": \"$OAUTH_PROVIDER\"}}"

  json_init
  json_add_string "ubusRpcSession" "$UBUS_RPC_SESSION"
  json_add_string "provider" "$OAUTH_PROVIDER"
  json_add_string "sub" "$USER_INFO_SUB"
  json_add_string "email" "$USER_INFO_EMAIL"
  json_add_string "name" "$USER_INFO_NAME"
  json_add_string "picture" "$USER_INFO_PICTURE"
  json_add_string "locale" "$USER_INFO_LOCALE"
  json_dump
}

auth_link_id_token()
{
  OAUTH_PROVIDER="${1}"
  OAUTH_ID_TOKEN="${2}"
  OAUTH_ID_TOKEN_VERIFY="${3}"
  OAUTH_REQ_NONCE="${4}"
  logger -t "oauth" "Auth for $OAUTH_PROVIDER Trying to link id_token $OAUTH_ID_TOKEN $OAUTH_ID_TOKEN_VERIFY"
  if [ -z "$OAUTH_ID_TOKEN_VERIFY" ]; then
    JWT_PAYLOAD=$(echo -n "$OAUTH_ID_TOKEN" | jwt-decode.sh --no-verify-sig)
  else
    JWT_PAYLOAD=$(echo -n "$OAUTH_ID_TOKEN" | jwt-decode.sh)
  fi
  if [ $? -ne 0 ]; then
    logger -t "oauth" auth_link_id_token "$2" "Unable to parse id_token $?"
    json_init
    json_add_object 'error'
    json_add_string "code" "invalid_id_token"
    json_add_string "message" "Unable to parse id_token"
    json_close_object
    json_dump
    exit 1
  fi

  json_init
  json_load "$JWT_PAYLOAD"
  json_get_var OAUTH_NONCE nonce
  json_get_var USER_INFO_SUB sub
  json_get_var USER_INFO_EMAIL email
  json_get_var USER_INFO_NAME name
  json_get_var USER_INFO_PICTURE picture
  json_get_var USER_INFO_LOCALE locale

  # check nonce if requested
  if [ -n "$OAUTH_ID_TOKEN_VERIFY" ]; then
    # sanitize input
    OAUTH_PROVIDER=$(echo "$OAUTH_PROVIDER" | tr -cd 'A-z0-9')
    OAUTH_REQ_NONCE=$(echo "$OAUTH_REQ_NONCE" | tr -cd 'A-z0-9')
    OAUTH_NONCE=$(echo "$OAUTH_NONCE" | tr -cd 'A-z0-9')
    NONCE_FILE="/tmp/nonce-$OAUTH_PROVIDER-$OAUTH_REQ_NONCE-$OAUTH_NONCE"
    if [ ! -f "$NONCE_FILE" ]; then
      logger -t "oauth" "$2" "$NONCE_FILE not exist"
      json_init
      json_add_object 'error'
      json_add_string "code" "invalid_nonce"
      json_add_string "message" "incorrect nonce $OAUTH_NONCE from id_token"
      json_close_object
      json_dump
      exit 1
    else
      rm "$NONCE_FILE"
    fi
  fi
  login "$OAUTH_PROVIDER" "$USER_INFO_SUB" "$USER_INFO_EMAIL" "$USER_INFO_NAME" "$USER_INFO_PICTURE" "$USER_INFO_LOCALE"
}

case "$1" in
list)
  echo '{'
  echo '"authOpts": {},'
  echo '"authComplete": {"provider": "str", "code": "str"},'
  echo '"authInit": {"provider": "str", "reqNonce": "str"},'
  echo '"authLink": {"provider": "str", "reqNonce": "str", "idToken": "str"}'
  echo '}'
  ;;
call)
  case "$2" in
  authOpts)
    cat /etc/auth-config.json
  ;;
  authComplete)
    read -r input
    json_init
    json_load "$input"
    json_get_var OAUTH_PROVIDER provider
    json_get_var OAUTH_CODE code
    echo "OAUTH_PROVIDER $OAUTH_PROVIDER OAUTH_CODE $OAUTH_CODE" >> /tmp/oauth.log
    if [ "$OAUTH_PROVIDER" = "github" ]; then
      OAUTH_TOKEN_ENDPOINT="$OAUTH_TOKEN_ENDPOINT_GITHUB"
      OAUTH_USERINFO_ENDPOINT="$OAUTH_USERINFO_ENDPOINT_GITHUB"
      OAUTH_CLIENT_ID="$OAUTH_CLIENT_ID_GITHUB"
      OAUTH_CLIENT_SECRET="$OAUTH_CLIENT_SECRET_GITHUB"
    elif [ "$OAUTH_PROVIDER" = "google" ]; then
      OAUTH_TOKEN_ENDPOINT="$OAUTH_TOKEN_ENDPOINT_GOOGLE"
      OAUTH_USERINFO_ENDPOINT="$OAUTH_USERINFO_ENDPOINT_GOOGLE"
      OAUTH_CLIENT_ID="$OAUTH_CLIENT_ID_GOOGLE"
      OAUTH_CLIENT_SECRET="$OAUTH_CLIENT_SECRET_GOOGLE"
    elif [ "$OAUTH_PROVIDER" = "facebook" ]; then
      OAUTH_TOKEN_ENDPOINT="$OAUTH_TOKEN_ENDPOINT_FACEBOOK"
      OAUTH_USERINFO_ENDPOINT="$OAUTH_USERINFO_ENDPOINT_FACEBOOK"
      OAUTH_CLIENT_ID="$OAUTH_CLIENT_ID_FACEBOOK"
      OAUTH_CLIENT_SECRET="$OAUTH_CLIENT_SECRET_FACEBOOK"
    elif [ "$OAUTH_PROVIDER" = "jkl.mn" ]; then
      OAUTH_TOKEN_ENDPOINT="$OAUTH_TOKEN_ENDPOINT_JKLMN"
      OAUTH_USERINFO_ENDPOINT="$OAUTH_USERINFO_ENDPOINT_JKLMN"
      OAUTH_CLIENT_ID="$OAUTH_CLIENT_ID_JKLMN"
      OAUTH_CLIENT_SECRET="$OAUTH_CLIENT_SECRET_JKLMN"
    else
      logger -t "oauth" "$2" "$input" "Unknown provider $OAUTH_PROVIDER"
      json_init
      json_add_object 'error'
      json_add_string "code" "invalid_id_token"
      json_add_string "message" "Unknown provider $OAUTH_PROVIDER"
      json_close_object
      json_dump
      exit 1
    fi

    # exchange code for access_token and id_token (which may be absent)
#    OAUTH_RESP=$(curl $OAUTH_TOKEN_ENDPOINT -X POST -sL \
#      -H 'Accept: application/json' \
#      -H 'Content-Type: application/x-www-form-urlencoded' \
#      --data "client_id=$OAUTH_CLIENT_ID" \
#      --data "client_secret=$OAUTH_CLIENT_SECRET" \
#      --data "redirect_uri=$OAUTH_CALLBACK_URL" \
#      --data "grant_type=authorization_code" \
#      --data-urlencode "code=$OAUTH_CODE" )

    OAUTH_RESP=$(wget "$OAUTH_TOKEN_ENDPOINT" -q -O - --header="Accept: application/json" --post-data \
      "&client_id=$OAUTH_CLIENT_ID&client_secret=$OAUTH_CLIENT_SECRET&redirect_uri=$OAUTH_CALLBACK_URL&grant_type=authorization_code&code=$OAUTH_CODE" \
      2>> /tmp/oauth.log)

    echo "OAUTH_RESP $OAUTH_RESP" >> /tmp/oauth.log

    json_init
    json_load "$OAUTH_RESP"
    json_get_var OAUTH_ACCESS_TOKEN access_token
    # may be not present
    json_get_var OAUTH_ID_TOKEN id_token
    logger -t "oauth" "$2" "$input" "OAuth token received '$OAUTH_ACCESS_TOKEN'"

    if [ -z "$OAUTH_ID_TOKEN" ]; then
      # we need to make an additional request to get user info
      USER_INFO=$(wget "$OAUTH_USERINFO_ENDPOINT" -q -O - \
        --header "Authorization: Bearer $OAUTH_ACCESS_TOKEN" \
        2>> /tmp/oauth.log)
      echo "USER_INFO $USER_INFO" >> /tmp/oauth.log
    else
      logger -t "oauth" "$2" "$input" "OAuth id_token received $OAUTH_ID_TOKEN"
      auth_link_id_token "$OAUTH_PROVIDER" "$OAUTH_ID_TOKEN"
    fi
    json_init
    json_load "$USER_INFO"
    json_get_var USER_INFO_SUB sub
    json_get_var USER_INFO_EMAIL email
    json_get_var USER_INFO_NAME name
    json_get_var USER_INFO_PICTURE picture
    json_get_var USER_INFO_LOCALE locale
    if [ "$OAUTH_PROVIDER" = "github" ]; then
      json_get_var USER_INFO_SUB id
      json_get_var USER_INFO_PICTURE avatar_url
    elif [ "$OAUTH_PROVIDER" = "facebook" ]; then
      json_get_var USER_INFO_SUB id
      json_get_var USER_INFO_PICTURE profile_pic
    fi
    login "$OAUTH_PROVIDER" "$USER_INFO_SUB" "$USER_INFO_EMAIL" "$USER_INFO_NAME" "$USER_INFO_PICTURE" "$USER_INFO_LOCALE"
  ;;
  authInit)
    read -r input
    json_init
    json_load "$input"
    json_get_var OAUTH_PROVIDER provider
    json_get_var OAUTH_REQ_NONCE reqNonce
    OAUTH_NONCE=$(mktemp -u XXXXXX)
    # sanitize input
    OAUTH_PROVIDER=$(echo "$OAUTH_PROVIDER" | tr -cd 'A-z0-9')
    OAUTH_REQ_NONCE=$(echo "$OAUTH_REQ_NONCE" | tr -cd 'A-z0-9')
    NONCE_FILE="/tmp/nonce-$OAUTH_PROVIDER-$OAUTH_REQ_NONCE-$OAUTH_NONCE"
    touch "$NONCE_FILE"
    json_init
    json_add_string "nonce" "$OAUTH_NONCE"
    json_dump
  ;;
  authLink)
    read -r input
    json_init
    json_load "$input"
    json_get_var OAUTH_PROVIDER provider
    json_get_var OAUTH_REQ_NONCE reqNonce
    json_get_var OAUTH_ID_TOKEN idToken
    auth_link_id_token "$OAUTH_PROVIDER" "$OAUTH_ID_TOKEN" "verify" "$OAUTH_REQ_NONCE"
  ;;
  esac
  ;;
esac
